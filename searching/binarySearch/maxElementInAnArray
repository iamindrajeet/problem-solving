/*Max Element in array
You have been given an array of elements. There exists a maximum element in this array such that elements to both sides decrease monotonically.

Find that index .

Sample Input 

7

1 2 3 4 5 2 1

Sample Output

4



-------------------------------------------------------------------------------------------------------------------------------------------------------------

Algorithm:
Edge Case Handling:

If the array has only one element, return its index (0) as it's the only maximum element possible.
Binary Search:

Initialize low to 0 and high to the last index of the array.
Perform binary search until low becomes greater than high.
At each iteration, calculate mid as the middle index between low and high.
Check Conditions:

If mid is not the first or last index of the array:
If nums[mid] is greater than its previous and next elements, it's the maximum element. Return mid.
If nums[mid] is less than its next element, update low = mid + 1 to search on the right side.
Otherwise, update high = mid - 1 to search on the left side.
If mid is the first index (0):
If nums[mid] is greater than its next element, it's the maximum element. Return mid.
Otherwise, return mid + 1.
If mid is the last index:
If nums[mid] is greater than its previous element, it's the maximum element. Return mid.
Otherwise, return mid - 1.
Return -1 if No Maximum Element Found:

If the loop completes and no maximum element is found, return -1.

Example:
Consider the input array:

1,2,3,4,5,2,1

The maximum element is 5 at index 4
5 is greater than both its previous (4) and next (2) elements.
So, the output should be 4. 

Conclusion:
This algorithm efficiently finds the index of the maximum element in the array where elements to both sides decrease monotonically, 
ensuring the correct index is returned even in cases where the maximum element is not at the extreme ends of the array.
*/

class Solution {
    public int indexMaxElement(int[] nums) {
        if(nums.length == 1)
            return 0;
        int low = 0, high = nums.length - 1;
        while(low <= high){
            int mid = low + (high - low) / 2;
            if(mid > 0 && mid < nums.length - 1){
                if(nums[mid] > nums[mid + 1] && nums[mid] > nums[mid - 1])
                    return mid;
                else if(nums[mid] < nums[mid + 1])
                    low = mid + 1;
                else
                    high = mid - 1;
            }
            else if(mid == 0){
                if(nums[mid] > nums[mid + 1])
                    return mid;
                else
                    return mid + 1;
            } else if(mid == nums.length - 1){
                if(nums[mid] > nums[mid - 1])
                    return mid;
                else
                    return mid - 1;
            }
        }
        return -1;
    }
}
