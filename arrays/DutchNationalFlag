/*
Dutch National Flag Problem:
The Dutch National Flag problem is a classic problem in computer science that involves sorting an array of 0s, 1s, and 2s in linear time. The problem is named after the Dutch national flag, which consists of three horizontal bands of red, white, and blue.

Problem Statement:
Given an array containing only 0s, 1s, and 2s, sort the array in a single traversal such that 0s come first, followed by 1s, and then 2s.

Example:
Let's say we have an array: [2, 0, 1, 2, 1, 0].

After sorting according to the Dutch National Flag algorithm, the array should be rearranged to [0, 0, 1, 1, 2, 2].

Approach:
Using Three Pointers: We maintain three pointers: low, mid, and high.

low: Points to the start of the array.
mid: Used for iteration through the array.
high: Points to the end of the array.
Iteration through the Array:

If arr[mid] is 0, swap arr[low] with arr[mid], increment both low and mid.
If arr[mid] is 1, no swap is needed. Simply move to the next element.
If arr[mid] is 2, swap arr[mid] with arr[high], decrement high.
Repeat these steps until mid crosses high.


*/

import java.util.Arrays;

public class DutchNationalFlag {
    public void sortColors(int[] nums) {
        int low = 0;
        int mid = 0;
        int high = nums.length - 1;

        while (mid <= high) {
            if (nums[mid] == 0) {
                swap(nums, low, mid);
                low++;
                mid++;
            } else if (nums[mid] == 1) {
                mid++;
            } else {
                swap(nums, mid, high);
                high--;
            }
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public static void main(String[] args) {
        DutchNationalFlag dnf = new DutchNationalFlag();
        int[] nums = {2, 0, 1, 2, 1, 0};
        dnf.sortColors(nums);
        System.out.println("Sorted array: " + Arrays.toString(nums));
    }
}
