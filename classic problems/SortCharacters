/*
Algorithm Explanation:
Counting Characters:

The algorithm starts by counting the frequency of each character in the given string str.
It stores the character frequencies in a HashMap, where the character is the key and its count is the value.
Sorting Characters by Frequency:

After counting, the algorithm sorts the characters based on their frequencies in descending order.
Characters with higher frequencies come first, followed by characters with lower frequencies.
If two characters have the same frequency, they are sorted lexicographically (alphabetically).
Building Sorted String:

Once the characters are sorted by frequency, the algorithm constructs a sorted string where characters are repeated according to their frequencies.
It iterates over the sorted characters and appends each character to a StringBuilder the number of times specified by its frequency.
Example:
Consider the input string: "ssgysyqa".

Counting Characters:

The algorithm counts the frequency of each character:
's': 3 times
'g': 1 time
'y': 2 times
'q': 1 time
'a': 1 time
The character frequencies are stored in a HashMap.
Sorting Characters by Frequency:

After sorting, the characters are arranged based on their frequencies:
's': 3 times
'y': 2 times
'a': 1 time
'g': 1 time
'q': 1 time
Characters with the same frequency are sorted lexicographically.
Building Sorted String:

The algorithm constructs the sorted string:
"sssyyagq"
Conclusion:
The algorithm effectively sorts the characters in the input string by their frequencies, ensuring that characters 
with higher frequencies appear earlier in the sorted string. This approach provides a way to analyze the distribution of characters in the input string
and create a sorted version based on their frequencies.


*/

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class SortCharacters {
	public static void main(String[] args) {
		// Sample HashMap
		String str = "ssgysyqa";
		HashMap<String, Integer> map = new HashMap<>();

		for (int i = 0; i < str.length(); i++) {
			map.put(String.valueOf(str.charAt(i)), map.getOrDefault(String.valueOf(str.charAt(i)), 0) + 1);
		}

		// Sort the HashMap by value in descending order
		LinkedHashMap<String, Integer> sortedMap = sortByValueDescending(map);

		// Print the sorted map
		System.out.println("Sorted HashMap (Descending Order):");
		for (Map.Entry<String, Integer> entry : sortedMap.entrySet()) {
			System.out.println(entry.getKey() + ": " + entry.getValue());
		}

		// StringBuilder to store the repeated keys
		StringBuilder sb = new StringBuilder();
		for (Map.Entry<String, Integer> entry : sortedMap.entrySet()) {
			for (int i = 0; i < entry.getValue(); i++) {
				sb.append(entry.getKey());
			}
		}
		System.out.println(sb.toString());
	}

	public static LinkedHashMap<String, Integer> sortByValueDescending(HashMap<String, Integer> map) {
		// Convert HashMap to a list of Map.Entry objects
		List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());

		Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
			@Override
			public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
				int compareValue = o2.getValue() - o1.getValue();
				if (compareValue != 0) {
					return compareValue;
				} else {
					return o1.getKey().compareTo(o2.getKey());
				}

			}
		});

		// Create a LinkedHashMap to store the sorted entries while maintaining order
		LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<>();
		for (Map.Entry<String, Integer> entry : list) {
			sortedMap.put(entry.getKey(), entry.getValue());
		}
		return sortedMap;
	}
}
