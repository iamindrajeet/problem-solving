/*
T.C - O(n) , space complexity = O(n + n)

*/

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] result = new int[nums.length];
        int[] suffixArray = new int[nums.length];
        int[] prefixArray = new int[nums.length];
        int suffixProd = 1, prefixProd = 1;
        prefixArray[0] = 1;
        suffixArray[nums.length - 1] = 1;
        for(int i = 1; i < nums.length; i++){
            prefixArray[i] = prefixArray[i - 1] * nums[i - 1];
            System.out.println(prefixArray[i] + " ");
        }
        for(int i = nums.length - 2; i >= 0; i--){
            suffixArray[i] = suffixArray[i + 1] * nums[i + 1];
        }

        for(int i = 0; i < result.length; i++){
            result[i] = prefixArray[i] * suffixArray[i];
        }
        return result;
    }
}

-----------Code with space complexity of O(n)-------------

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] result = new int[nums.length];
        int suffixProd = 1, prefixProd = 1;
        for(int i = 0; i < nums.length; i++){
            result[i] = prefixProd;
            prefixProd *= nums[i];
        }
        for(int i = nums.length - 1; i >= 0; i--){
            result[i] *= suffixProd;
            suffixProd *= nums[i];
        }
        return result;
    }
}