//Approach-1 - Brute Force
//T.C : O(m+n)
//S.C : O(m+n)
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        
        vector<int> temp(m+n);
        int i = 0, j = 0, k = 0;
        
        while(i < m && j < n) {
            if(nums1[i] < nums2[j])
                temp[k++] = nums1[i++];
            else
                temp[k++] = nums2[j++];
        }
        
        while(i < m) temp[k++] = nums1[i++];
        while(j < n) temp[k++] = nums2[j++];
        
        int size = m+n;
        
        if(size%2 != 0)
            return temp[size/2];
        
        return (temp[size/2]+temp[(size/2)-1])/2.0;
        
    }
};


/*

This algorithm aims to find the median of two sorted arrays efficiently with constant space complexity.

Here's a simple explanation of how it works with an example:

Algorithm Explanation:
Initialization:

Determine the sizes of the two arrays, m and n, and calculate the total size of the merged array (size = m + n).
Identify the indices (idx1 and idx2) of the elements that will contribute to the median.
Merge Process:

Initialize pointers i, j, and k to iterate through both arrays and keep track of the merged array.
Iterate through both arrays simultaneously using pointers i and j.
Compare elements at nums1[i] and nums2[j], and merge them into a single sorted array.
As we merge elements, track the kth and (k+1)th elements, which will contribute to finding the median.
Determine Median Elements:

Once the merged array is formed, retrieve the elements at indices idx1 and idx2.
If the total size is odd, the median is simply the (k+1)th element (element2).
If the total size is even, the median is the average of the (k+1)th and (k+2)th elements (element1 and element2).
Example:
Consider the two sorted arrays:

nums1 = [1, 3, 8]
nums2 = [2, 4, 5, 6]

After merging, the combined sorted array would be [1, 2, 3, 4, 5, 6, 8].
The total size of the merged array is 7, so idx1 = (7/2) - 1 = 2 and idx2 = 7/2 = 3.
Iterating through both arrays, we'll find that element1 = 3 and element2 = 4.
Since the total size is odd, the median is element2 = 4.
So, the median of the two sorted arrays [1, 3, 8] and [2, 4, 5, 6] is 4.


*/
//Approach-2 - Optimising Space from Approach-1
//T.C : O(m+n)
//S.C : O(1)
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        int size = m+n;
        
        int idx1 = (size/2)-1;
        int element1 = -1;
        int idx2 = size/2;
        int element2 = -1;
        
        int i = 0, j = 0, k = 0;
        
        while(i < m && j < n) {
            if(nums1[i] < nums2[j]) {
                if(k == idx1) {
                    element1 = nums1[i];
                }
                if(k == idx2) {
                    element2 = nums1[i];
                }
                i++;
            } else {
                if(k == idx1) {
                    element1 = nums2[j];
                }
                if(k == idx2) {
                    element2 = nums2[j];
                }
                j++;
            }
            k++;
        }
        
        while(i < m) {
            if(k == idx1) {
                element1 = nums1[i];
            }
            if(k == idx2) {
                element2 = nums1[i];
            }
            i++;
            k++;
        }
        
        while(j < n) {
            if(k == idx1) {
                element1 = nums2[j];
            }
            if(k == idx2) {
                element2 = nums2[j];
            }
            j++;
            k++;
        }

        if(size%2 == 1)
            return element2;
        
        return (element1 + element2)/2.0;
        
    }
};


//Approach-3 (Using Binary Search)
//T.C : O(log(min(m, n))
//S.C : O(1)
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size() > nums2.size())
            return findMedianSortedArrays(nums2, nums1);
        
        int m = nums1.size();
        int n = nums2.size();
        
        int low = 0, high = m;
        while(low <= high) {
            
            int Px = low + (high-low)/2;
            int Py = (m+n+1)/2 - Px;
            
            int x1  = (Px == 0) ? INT_MIN : nums1[Px-1];
            int x3 = (Px == m) ? INT_MAX : nums1[Px];
            
            int x2  = (Py == 0) ? INT_MIN : nums2[Py-1];
            int x4 = (Py == n) ? INT_MAX : nums2[Py];
            
            if(x1 <= x4 && x2 <= x3) {
                if((m+n)%2 == 0)
                    return (max(x1, x2) + min(x3, x4))/2.0;
                
                return max(x1, x2);
            } else if(x1 > x4) {
                high = Px-1;
            } else {
                low = Px+1;
            }
        }
        
        return -1;
    }
};




//Approach-3 (Using Binary Search)
//T.C : O(log(min(m, n))
//S.C : O(1)

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length > nums2.length)
            return findMedianSortedArrays(nums2, nums1);
        
        int m = nums1.length, n = nums2.length;
        int low = 0 , high = m;

        while(low <= high){
            int px = low + (high - low) / 2; // to find how many elements to left of partition
            int py = (m + n + 1) / 2 - px;  // to find how many elements to right of partition

            int x1 = px == 0 ? Integer.MIN_VALUE : nums1[px - 1];
            int x2 = py == 0 ? Integer.MIN_VALUE : nums2[py - 1];
            int x3 = px == m ? Integer.MAX_VALUE : nums1[px];
            int x4 = py == n ? Integer.MAX_VALUE : nums2[py];

            if(x1 <= x4 && x2 <= x3){
                if((m + n) % 2 == 0){
                    return (Math.max(x1, x2) + Math.min(x3, x4)) / 2.0; 
                }else
                    return Math.max(x1, x2);
            }
            else if(x1 > x4){
                high = px - 1;
            }else{
                low = px + 1;
            }
        }
        return -1;
    }
}